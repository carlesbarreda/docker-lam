name: Docker Image CI
on:
  schedule:
    - cron: '00 23 * * 0'

  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  #REGISTRY: ghcr.io
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  #IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME: carlesbarreda/lam
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder
  RELEASE: ""
  BUILD: false
  COMMIT: false
  AUTHORS: docker@carlesbarreda.cat
  VENDOR: Carles Barreda
  GIT_NAME: Carles Barreda
  GIT_MAIL: 9409275+carlesbarreda@users.noreply.github.com

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  pusher:
    name: Build and push
    runs-on: ubuntu-latest
    steps:

      # https://github.com/actions/checkout
      - name: Checkout LDAPAccountManager/lam
        uses: actions/checkout@v3
        with:
          repository: LDAPAccountManager/lam
          path: ${{ env.BUILD_PATH }}
          fetch-depth: 0

      - name: Checkout Latest Tag (version)
        run: |
          RELEASE=$(git describe --abbrev=0 --tags || echo 'false')
          [[ '$RELEASE' != 'false' ]] && git checkout $RELEASE && BUILD='true'
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "BUILD=$BUILD" >> $GITHUB_ENV

      - name: Check Tag Exists
        uses: mukunku/tag-exists-action@v1.2.0
        id: checkTag
        with: 
          tag: ${{ env.RELEASE }}

      - name: Check If Need Build
        run: |
          BUILD=${{ env.BUILD }}
          [[ '${{ env.RELEASE }}' != 'false' && '${{ steps.checkTag.outputs.exists }}' != 'true' ]] && BUILD='true'
          [[ '${{ env.RELEASE }}' != 'false' && '${{ github.event_name }}' == 'push' ]] && BUILD='true'
          echo "BUILD=$BUILD" >> $GITHUB_ENV

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        if: env.BUILD == 'true'
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:latest
          platforms: linux/amd64,linux/arm64/v8,linux/arm/v7

      # https://github.com/docker/setup-buildx-action
      # https://github.com/docker/build-push-action/issues/755#issuecomment-1378273495
      # https://github.com/docker/build-push-action/issues/755#issuecomment-1378680855
      - name: Set up Docker Buildx
        if: env.BUILD == 'true'
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Login to Docker Hub
        if: env.BUILD == 'true' && github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          #username: ${{ github.actor }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.authors=${{ env.AUTHORS }}
            org.opencontainers.image.vendor=${{ env.VENDOR }}
            org.opencontainers.image.version=${{ env.RELEASE }}

      - name: Build amd64, arm64v8 and arm32v7
        if: env.BUILD == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.BUILD_PATH }}/lam-packaging/docker
          file: ${{ env.BUILD_PATH }}/Dockerfile
          platforms: linux/amd64,linux/arm64/v8,linux/arm/v7
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.RELEASE }}
            ${{ env.IMAGE_NAME }}:latest
          #tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          push: true

      - name: Create tag
        if: steps.checkTag.outputs.exists != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.RELEASE }}",
              sha: context.sha
            })
